spring.application.name=authentication-service
server.port=8600
#server.servlet.context-path=/spring-boot-demo
pring.config.import=optional:configserver:

# ===============================
# = postgresql data source start
# ===============================
#spring.datasource.url=jdbc:postgresql://localhost:5432/authentication-service
#spring.datasource.username=postgres
#spring.datasource.password=root
#spring.datasource.driverClassName=org.postgresql.Driver

#spring.datasource.driver-class-name=org.postgresql.Driver
# ===============================
# = postgresql data source end
# ===============================


# ===============================
# MySQL DB JDBC start
# ===============================
# no required springboot2+ onwards to mention spring.datasource.driverClassName= com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/authentication_service?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&useUnicode=true&characterEncoding=utf-8&autoReconnect=true
spring.datasource.username=root
spring.datasource.password=root
# ===============================
# MySQL DB JDBC end
# ===============================

# Hibernate Properties
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
#spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

#below properties will automatically create and updates database schema
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.connection.pool_size=5
spring.jpa.properties.hibernate.current_session_context_class=thread

# Eureka Client start
# eureka.client.register-with-eureka=true
# eureka.client.fetch-registry=true
# eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
# eureka.instance.preferIpAddress=true
# Eureka Client end

#Cloud Config Sever Start
# application.properties (only for Config Client)
# spring.config.import=optional:configserver:http://localhost:9595
#Note:- above import has higher precedence over uri. First of all default properties will always be imported.
# spring.cloud.config.uri=http://localhost:9595
#Cloud Config Sever End


# URL where Admin Server is running start


# URL where Admin Server is running end


## Actuator start
management.endpoints.web.exposure.include=*
management.endpoint.env.show-values=ALWAYS
management.endpoint.configprops.show-values=ALWAYS
management.endpoint.health.show-details=always
management.info.env.enabled=true
#management.endpoints.web.exposure.exclude=env,beans
## Actuator end


### KeyStore start####
#Disabling Security for Actuator Endpoints by false value, enabling by true. You can protect some or all uri exposed by actuator
management.security.enabled=false

### NOTE:- Current using PKCE type keystore only[ not keystore.jks or  keystore.cer], mentioned below###  \keys\keystore.p12
app.jwt.keyStorePKCE12.location=classpath:keys\\keystore.p12
app.jwt.keypairPKCE12.alias=signjwt
app.jwt.keyStorePKCE12.password=abhimanyu
app.jwt.keyStorePKCE12.deststorepassword=abhimanyu
app.jwt.keyStorePKCE12.destkeypassword=abhimanyu
app.jwt.keyStorePKCE12.storetype=PKCS12
### Current using PKCE type keystore only, mentioned Above###
### KeyStore End ####

###
#https://www.calculateme.com/time/milliseconds/to-minutes/60000
#For Production Mode
#3,600,000 Milliseconds = 60 Minutes
#app.jwtExpirationMs= 3600000
#86,400,000 Milliseconds = 1,440 Minutes
#app.jwtRefreshExpirationMs= 86400000

## For Dev/Test Mode
#60,000 Milliseconds = 1 Minute
app.jwtExpirationMs= 60000 
#120,000 Milliseconds = 2 Minutes
app.jwtRefreshExpirationMs= 120000
#120,000 milliseconds is equal to 2 minutes (or 2 minutes and 0 seconds).

# 1h in millisecond = 3600000
# a day = 86400000

